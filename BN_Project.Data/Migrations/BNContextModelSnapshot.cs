// <auto-generated />
using System;
using BN_Project.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BN_Project.Data.Migrations
{
    [DbContext(typeof(BNContext))]
    partial class BNContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BN_Project.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompleteAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefalut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6128),
                            IsDelete = false,
                            Title = "مدیریت کامنت ها",
                            UniqeName = "Comments_Management"
                        },
                        new
                        {
                            Id = 2,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6144),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "کامنت ها",
                            UniqeName = "Comments_Comments"
                        },
                        new
                        {
                            Id = 3,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6145),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "تایید کامنت",
                            UniqeName = "ConfirmComment_Comment"
                        },
                        new
                        {
                            Id = 4,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6146),
                            IsDelete = false,
                            ParentId = 1,
                            Title = "بستن کامنت",
                            UniqeName = "CloseComment_Comment"
                        },
                        new
                        {
                            Id = 5,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6173),
                            IsDelete = false,
                            Title = "مدیریت تیکت ها",
                            UniqeName = "Tickets_Management"
                        },
                        new
                        {
                            Id = 6,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6174),
                            IsDelete = false,
                            ParentId = 5,
                            Title = "تیکت ها",
                            UniqeName = "Tickets_Tickets"
                        },
                        new
                        {
                            Id = 7,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6175),
                            IsDelete = false,
                            ParentId = 5,
                            Title = "بستن تیکت",
                            UniqeName = "CloseTicket_Tickets"
                        },
                        new
                        {
                            Id = 8,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6176),
                            IsDelete = false,
                            ParentId = 5,
                            Title = "جزئیات تیکت",
                            UniqeName = "AddTicketMessage_Tickets"
                        },
                        new
                        {
                            Id = 9,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6177),
                            IsDelete = false,
                            ParentId = 5,
                            Title = "پاسخ به تیکت",
                            UniqeName = "SendMessage_Tickets"
                        },
                        new
                        {
                            Id = 10,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6178),
                            IsDelete = false,
                            ParentId = 5,
                            Title = "باز کردن تیکت",
                            UniqeName = "AddTicket_Tickets"
                        },
                        new
                        {
                            Id = 11,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6179),
                            IsDelete = false,
                            Title = "مدیریت کاربران",
                            UniqeName = "Users_Management"
                        },
                        new
                        {
                            Id = 12,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6179),
                            IsDelete = false,
                            ParentId = 11,
                            Title = "کاربران",
                            UniqeName = "Users_Users"
                        },
                        new
                        {
                            Id = 13,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6180),
                            IsDelete = false,
                            ParentId = 11,
                            Title = "افزودن کاربران",
                            UniqeName = "AddUser_Users"
                        },
                        new
                        {
                            Id = 14,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6181),
                            IsDelete = false,
                            ParentId = 11,
                            Title = "حذف کاربر",
                            UniqeName = "RemoveUser_Users"
                        },
                        new
                        {
                            Id = 15,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6182),
                            IsDelete = false,
                            ParentId = 11,
                            Title = "ویرایش کاربر",
                            UniqeName = "EditUser_Users"
                        },
                        new
                        {
                            Id = 16,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6183),
                            IsDelete = false,
                            Title = "مدیریت محصولات",
                            UniqeName = "Products_Management"
                        },
                        new
                        {
                            Id = 17,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6183),
                            IsDelete = false,
                            ParentId = 16,
                            Title = "محصولات",
                            UniqeName = "Products_Products"
                        },
                        new
                        {
                            Id = 18,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6184),
                            IsDelete = false,
                            ParentId = 16,
                            Title = "افزودن محصول",
                            UniqeName = "AddProduct_Products"
                        },
                        new
                        {
                            Id = 19,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6185),
                            IsDelete = false,
                            ParentId = 16,
                            Title = "ویرایش محصول",
                            UniqeName = "EditProduct_Products"
                        },
                        new
                        {
                            Id = 20,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6186),
                            IsDelete = false,
                            ParentId = 16,
                            Title = "حذف محصول",
                            UniqeName = "DeleteProduct_Products"
                        },
                        new
                        {
                            Id = 21,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6187),
                            IsDelete = false,
                            Title = "دسته بندی ها",
                            UniqeName = "Categories_Products"
                        },
                        new
                        {
                            Id = 22,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6188),
                            IsDelete = false,
                            ParentId = 21,
                            Title = "افزودن دسته بندی",
                            UniqeName = "AddCategory_Products"
                        },
                        new
                        {
                            Id = 23,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6189),
                            IsDelete = false,
                            ParentId = 21,
                            Title = "ویرایش دسته بندی",
                            UniqeName = "EditCategory_Products"
                        },
                        new
                        {
                            Id = 24,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6189),
                            IsDelete = false,
                            ParentId = 21,
                            Title = "حذف دسته بندی",
                            UniqeName = "RemoveCategory_Products"
                        },
                        new
                        {
                            Id = 25,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6190),
                            IsDelete = false,
                            Title = "زنگ ها",
                            UniqeName = "Colors_Products"
                        },
                        new
                        {
                            Id = 26,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6191),
                            IsDelete = false,
                            ParentId = 25,
                            Title = "افزودن رنگ",
                            UniqeName = "AddColor_Priducts"
                        },
                        new
                        {
                            Id = 27,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6192),
                            IsDelete = false,
                            ParentId = 25,
                            Title = "ویرایش رنگ",
                            UniqeName = "EditColor_Products"
                        },
                        new
                        {
                            Id = 28,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6193),
                            IsDelete = false,
                            ParentId = 25,
                            Title = "حذف رنگ",
                            UniqeName = "DeleteColor_Products"
                        },
                        new
                        {
                            Id = 29,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6195),
                            IsDelete = false,
                            Title = "عکس محصولات",
                            UniqeName = "Gallery_Products"
                        },
                        new
                        {
                            Id = 30,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6195),
                            IsDelete = false,
                            ParentId = 29,
                            Title = "افزودن تصویر",
                            UniqeName = "AddImage_Products"
                        },
                        new
                        {
                            Id = 31,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6196),
                            IsDelete = false,
                            ParentId = 29,
                            Title = "حذف تصویر",
                            UniqeName = "RemoveImage_Products"
                        },
                        new
                        {
                            Id = 32,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6197),
                            IsDelete = false,
                            Title = "تخفیف ها",
                            UniqeName = "Discounts_Products"
                        },
                        new
                        {
                            Id = 33,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6198),
                            IsDelete = false,
                            ParentId = 32,
                            Title = "افزودن تخفیف",
                            UniqeName = "AddDiscount_Products"
                        },
                        new
                        {
                            Id = 34,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6199),
                            IsDelete = false,
                            ParentId = 32,
                            Title = "ویرایش تخفیف",
                            UniqeName = "EditDiscount_Products"
                        },
                        new
                        {
                            Id = 35,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6199),
                            IsDelete = false,
                            ParentId = 32,
                            Title = "حذف تخفیف",
                            UniqeName = "RemoveDiscount_Products"
                        },
                        new
                        {
                            Id = 36,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(6200),
                            IsDelete = false,
                            Title = "صفحه اصلی ادمین",
                            UniqeName = "Admin_Index"
                        });
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(7378),
                            IsDelete = false,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.RolesPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesPermissions");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.UsersRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 132, DateTimeKind.Local).AddTicks(100),
                            IsDelete = false,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildQuality")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesignAndAppearance")
                        .HasColumnType("int");

                    b.Property<int>("EaseOfUse")
                        .HasColumnType("int");

                    b.Property<int>("FeaturesAndCapabilities")
                        .HasColumnType("int");

                    b.Property<int>("Innovation")
                        .HasColumnType("int");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ValueForMoneyComparedToTHePrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.Impression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("LikeOrDislike")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("Impressions");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.Strength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("Strengths");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.WeakPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("WeakPoints");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.DiscountProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("DiscountProduct");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<long>("FinalPrice")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.OrderBasket.PurchesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("RefId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("PurchesHistories");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.ProductGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGallery");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpadate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SectionId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.TicketMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdminRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomerRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessages");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivationCode = "951a5c745b884a02ba2c11d8b8838f8e",
                            Create = new DateTime(2023, 9, 2, 17, 27, 44, 131, DateTimeKind.Local).AddTicks(8469),
                            Email = "admin@gmail.com",
                            IsActive = true,
                            IsDelete = false,
                            Name = "admin",
                            Password = "A4-4D-2B-22-FB-2E-12-9C-92-12-46-3F-69-80-80-57"
                        });
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Address", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.Permission", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Authentication.Permission", "MotherPermission")
                        .WithMany("Permissions")
                        .HasForeignKey("ParentId");

                    b.Navigation("MotherPermission");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.RolesPermissions", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Authentication.Permission", "Permission")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BN_Project.Domain.Entities.Authentication.Role", "Role")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.UsersRoles", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Authentication.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BN_Project.Domain.Entities.UserEntity", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Category", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Color", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Product", "Product")
                        .WithMany("Colors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.Comment", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BN_Project.Domain.Entities.UserEntity", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.Impression", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Comment.Comment", "Comment")
                        .WithMany("Impressions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.Strength", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Comment.Comment", "Comment")
                        .WithMany("Strengths")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.WeakPoint", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Comment.Comment", "Comment")
                        .WithMany("WeakPoints")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.DiscountProduct", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Discount", "Discount")
                        .WithMany("DiscountProduct")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BN_Project.Domain.Entities.Product", "Product")
                        .WithMany("DiscountProduct")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Order", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("BN_Project.Domain.Entities.Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId");

                    b.HasOne("BN_Project.Domain.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.OrderBasket.PurchesHistory", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Order", "Order")
                        .WithMany("PurchesHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Color", "Color")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BN_Project.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Product", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.ProductGallery", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BN_Project.Domain.Entities.Section", "Section")
                        .WithMany("Tickets")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.TicketMessages", b =>
                {
                    b.HasOne("BN_Project.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BN_Project.Domain.Entities.Ticket", "Ticket")
                        .WithMany("TicketMessages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.Permission", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RolesPermissions");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Authentication.Role", b =>
                {
                    b.Navigation("RolesPermissions");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Color", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Comment.Comment", b =>
                {
                    b.Navigation("Impressions");

                    b.Navigation("Strengths");

                    b.Navigation("WeakPoints");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Discount", b =>
                {
                    b.Navigation("DiscountProduct");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("PurchesHistories");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Product", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Comments");

                    b.Navigation("DiscountProduct");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Section", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("BN_Project.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
